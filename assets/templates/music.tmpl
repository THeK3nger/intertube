<!doctype html>
<html>
	<head>
		{{render "_head" $}}
		<title>{{tr "titleprefix"}}{{tr "music_title"}}</title>
		<style>
			{{$opt := opts}}
			table {
				{{if $opt.Stretch}}
					width: 100%;
				{{else}}
					width: 110ch;
				{{end}}
				margin: auto;
				/*width: 100%;*/
				/*max-width: 100%;*/
				/*border: 1px solid black;*/
				margin-top: 1em;
				margin-bottom: 1em;
				table-layout: fixed;
				padding-left: 1vw;
				padding-right: 1vw;
			}
			@media screen and (max-width: 120ch) {
				table {
					width: 100%;
				}
			}
			main {
				min-height: 100vh;
				counter-reset: selectedtracks;
			}
			#loading-progress {
				font-size: smaller;
				display: none;
			}
			#loading-progress[data-ct] {
				display: unset;
			}
			/*table {
				-webkit-transform: translate3d(0, 0, 0);
				         transform: translate3d(0, 0, 0);
			}*/
			table th {
				text-align: left;
			}
			.sort-row a, .sort-row a:visited {
				color: var(--links);
				text-decoration: none;
			}
			.sort-row a:hover {
				/*text-decoration: underline;*/
			}
			.sort-row a.active[data-reverse='true']::after {
				content: " ▼";
			}
			.sort-row a.active[data-reverse='false']::after {
				content: " ▲";
			}
			.sort-row a:not(.active):hover::after {
				content: " ▲";
			}
/*			.sort-row a:not(.active)[data-reverse='false']::after {
				content: " ▲";
			}*/
			.track[data-state='playing'] {
				background: var(--hi-bg);
				color: var(--hi-fg);
			}
			.track[data-selected="true"] {
				background-image: repeating-linear-gradient(-45deg, transparent, transparent 10px, var(--hi-bg) 10px, var(--hi-bg) 20px);
				/*color: var(--hi-fg);*/
				counter-increment: selectedtracks;
			}
			@media (hover: hover) {
				.track:hover {
					cursor: pointer;
				}
				.track td a:hover, a.album-artist:hover {
					cursor: pointer;
					text-decoration: underline;
				}
				table tr[data-state='stopped'] .status-stopped {
					visibility: hidden;
				}
				.track[data-state='stopped']:hover {
					background: var(--hi-bg);
					color: var(--hi-fg);
				}
				table tr[data-state='stopped']:hover .status-stopped {
					visibility: visible;
				}
				#player figcaption:hover {
					cursor: pointer;
				}
			}
			table tr[data-state='playing'] .status-playing, table tr[data-state='stopped'] .status-stopped {
				display: initial;
			}
			table tr[data-state='playing'] .status-stopped, table tr[data-state='stopped'] .status-playing  {
				display: none;
			}
			.track[data-resume='0'] .play-fresh, .track:not([data-resume='0']) .play-resume {
				display: initial;
			}
			.track[data-resume='0'] .play-resume, .track:not([data-resume='0']) .play-fresh {
				display: none;
			}
			.track-pic img {
				max-width: 50px;
				height: auto;
			}
			.track-status {
				text-align: center;
				width: 2em;
			}
			.track-status a {
				cursor: pointer;
			}
			.track-artist, .track-album, .track-title {
				/*padding-left: 1px;*/
			}
			.track-pic {
				height: 50px;
				width: 50px;
			}
			#player {
				position: sticky;
				bottom: 0;
				/*padding: 1px;*/
				border-top: 1px solid var(--border);
				left: 1px;
				right: 1px;
				text-align: center;
				color: var(--player-title, var(--hi-fg));
			}

			#player #player-inner {
				display: inline-block;
				background-origin: border-box;
				background-repeat: no-repeat;
				background-size: contain;
				width: 100%;
				height: 100%;
			}

			audio::-webkit-media-controls-panel {
				background-color: var(--audio-bg);
			}

			#player figure {
				margin-bottom: 0;
			}

			#player #player-controls {
				font-size: larger;
				margin-bottom: 1em;
			}

			#player-controls a {
				cursor: pointer;
				margin-right: 0.5em;
				text-decoration: none;
			}

			#player[data-state="playing"] a.play-btn, #player:not([data-state="playing"]) a.pause-btn {
				display: none;
			}

			#player[data-state="playing"] a.pause-btn, #player:not([data-state="playing"]) a.play-btn {
				display: unset;
			}

			#player .play-mode-btn {
				display: none;
			}

			#player[data-mode="normal"] a.normal-btn {
				display: unset;
				opacity: 0.35;
			}

			#player[data-mode="repeat"] a.repeat-btn {
				display: unset;
				color: unset;
			}

			#player[data-mode="repeat-one"] a.repeat-one-btn {
				display: unset;
				color: unset;
			}

/*			#player[data-mode="repeat-one"] a.re {
				display: unset;
				color: unset;
			}*/

/*			#player[data-mode="repeat"] a.repeat-one-btn, #player:not([data-mode="repeat"]) a.repeat-btn {
				display: unset;
			}*/

			#player-controls .download-btn:not([href]) {
				filter: grayscale(1);
			}

			#player-controls .download-btn:not([href]), #player[data-shuffle="off"] .shuffle-btn {
				/*display: none;*/
				opacity: 0.35;
			}

			#player-controls .download-btn[href] {
				display: unset;
				color: unset;
				filter: unset;
			}

			#player[data-shuffle="on"] .shuffle-btn {
				color: unset;
				filter: unset;
			}

			#other-controls {
				display: flex;
				flex-direction: column;
				justify-content: space-between;
				margin-top: 1em;
				position: fixed;
				bottom: 2em;
				right: 2px;
			}

			#other-controls a {
				margin-bottom: 1em;
				margin-right: 0.5em;
				cursor: pointer;
			}

			#player:not([data-track]) .delete-btn, #player:not([data-track]) .edit-btn {
				opacity: 0.35;
				filter: grayscale(1);
			}
			#player:not([data-multiselect="on"]) #multibox {
				display: none;
			}
			#player[data-multiselect="on"] #multibox {
				display: flex;
				align-items: center;
				justify-content: space-between;
				border-bottom: 1px solid var(--border);
				margin-top: -1px;
			}
			#player #multibox .multi-count::after {
				content: counter(selectedtracks);
			}
			#player #multibox #multi-controls a {
				cursor: pointer;
				opacity: unset;
				filter: unset;
			}
			#player #multibox #multi-unselect {
				cursor: pointer;
				align-self: center;
				/*padding-left: 2px;*/
				padding-right: 0.9em;
			}			
			#player[data-track] .delete-btn, #player[data-track] .edit-btn {
				color: unset;
				filter: unset;
			}

			/* TODO: fix. horribly broken ;_; */
			@media (hover: none) {
				table {
					table-layout: fixed;
					padding: 0 !important;
					margin: 0;
					overflow: hidden;
				}
				tr {
					height: 50px;
					overflow: hidden;
				}
				tr th:nth-child(1), tr td:nth-child(1) {
					width: 10% !important;
				}
				tr th:nth-child(2), tr td:nth-child(2) {
					width: 30% !important;
				}
				tr th:nth-child(3), tr td:nth-child(3) {
					display: none;
					/*width: 40% !important;*/
				}
				tr th:nth-child(4), tr td:nth-child(4) {
					width: 30% !important;
				}
				#player #player-inner {
					background-image: none !important;
				}
				#player audio {
					max-width: 100%;
				}
				#other-controls {
					float: unset;
					position: fixed;
					bottom: 2em;
					right: 2px;
				}
				#other-controls a {
					margin-right: 0;
				}
			}

			#filter-bar {
				position: sticky;
				top: -1px;
				padding-top: 1px;
				z-index: 10;
				width: 100%;
				border-top: 1px solid var(--border);
				border-bottom: 1px solid var(--border);
				display: flex;
				justify-content: space-between;
			}
			#filter-bar #filter-form {
				display: flex;
			}
			#filter-bar #view-switcher {
				text-align: right;
				align-self: center;
			}
			#filter-cancel {
				cursor: pointer;
				align-self: center;
				padding-left: 2px;
				padding-right: 2px;
			}

			.album {
				margin-bottom: 0.3em;
			}
			.album-inner {
				display: flex;
			}
			.album-inner .album-cover {
				/*min-width: 350px;*/
				width: 350px;
				max-width: 30vw;
				max-height: 30vw;
				height: auto;
				object-fit: contain;
				object-position: top;
			}
			.album-inner .album-cover.placeholder {
				background-image: repeating-linear-gradient(-45deg, transparent, transparent 10px, #b6acad50 10px, #b6acad50 20px);
			}
			.album-inner .album-cover:hover {
				cursor: pointer;
				transform: translate(-2px, -2px);
			}
			.album ol {
				margin-block-start: 0;
			}
			.album-inner .album-info {
				padding-left: 1em;
				flex-grow: 1;
			}
			.album .track:hover .track-title {
				text-decoration: underline;
			}
			.album .track[data-state="playing"] .track-title {
				font-weight: bold;
			}
		</style>
		<script>
			prefetch = function() {};
		</script>
		<style id="filter-style">
		</style>
	</head>
	<body>
		{{render "_nav" $}}
		<main>
			<h2>{{tr "music_title"}} <span id="loading-progress" {{with $.Next}} data-ct="{{len $.Tracks}}" {{end}}>{{tr "music_loading"}}</span></h2>

			{{if (eq 0 (len $.Tracks))}}
				<p>{{tr "music_notracks"}}</p>
				<p>☛ <a href="/upload">{{tr "music_uploadhere"}}</a></p>
			{{end}}

			<header id="filter-bar" class="frosty">
				<form id="filter-form" onsubmit="return updateFilter(arguments[0]),false;">
					<input id="filter-input" type="text" oninput="updateFilter()" inputmode="search" placeholder="🔎"> 
					<a id="filter-cancel" tabindex=0 onclick="document.getElementById('filter-input').value = ''; updateFilter(); return false;">✖︎</a>
				</form>
				<div id="view-switcher" class="menu prefetch">
					<a href="/music" onclick="return visit(this),false;" {{if (eq $.View "music_all")}} class="active" {{end}}>{{tr "music_all"}}</a>
					<a href="/music/albums" onclick="return visit(this),false;" {{if (eq $.View "music_albums")}} class="active" {{end}}>{{tr "music_albums"}}</a>
					<!-- <a href="/music/playlists" onclick="return visit(this),false;" {{if (eq $.View "music_albums")}} class="active" {{end}}>playlists</a> -->
					<!-- <a href="/music/podcastx" onclick="return visit(this),false;" {{if (eq $.View "music_albums")}} class="active" {{end}}>podcasts</a> -->
				</div>
			</header>

			{{render $.View $}}
		</main>

		<div id="player" class="frosty" data-n="0" data-last-update="0" data-state="stopped" data-mode="normal" data-shuffle="off">
			<div id="multibox">
				<div></div>
				<div id="multi-controls">
					<!-- TODO: i18n -->
					selected <span class="multi-count"></span> track(s): 
					<a title='{{tr "player_play"}}' class="m-play-btn" tabindex=0 onclick="return playTracks(selectedTracks()),false;">▶️</a> 
					<a title='{{tr "player_edit"}}' class="edit-btn" tabindex=0 onclick="return editTrack(selectedTracks()),false">📝</a> 
					<a title='{{tr "player_delete"}}' class="delete-btn" tabindex=0 onclick="return deleteTrack(selectedTracks()),false">🗑️</a>
				</div>
				<a id="multi-unselect" tabindex=0 title='{{tr "music_deselect"}}' onclick="unselectTracks(); return false;">✖︎</a>
			</div>
			<div id="player-inner">
				<div id="other-controls">
					<a title='{{tr "player_edit"}}' class="edit-btn" tabindex=0 onclick="return editTrack(currentTrack()),false">📝</a>
					<a title='{{tr "player_delete"}}' class="delete-btn" tabindex=0 onclick="return deleteTrack(),false">🗑️</a>
				</div>
				<figure>
					<figcaption class="player-title" onclick="return scrollToTrack(currentTrack()),false;">&nbsp;</figcaption>
					<audio controls></audio>
				</figure>
				<div id="player-controls">
					<a title='{{tr "player_prev"}}' class="next-btn" tabindex=0 onclick="return playTrack(prevTrack(), true),false;">⏮️</a> 
					<a title='{{tr "player_play"}}' class="play-btn" tabindex=0 onclick="return playTrack(currentTrack()),false;">▶️</a> 
					<a title='{{tr "player_pause"}}' class="pause-btn" tabindex=0 onclick="return pauseTrack(currentTrack()),false;">⏸️</a> 
					<a title='{{tr "player_next"}}' class="prev-btn" tabindex=0 onclick="return playTrack(nextTrack(), true),false;">⏭️</a>
					<a title='{{tr "player_repeat"}}' class="repeat-btn play-mode-btn" tabindex=0 onclick="return setMode('repeat-one'),false;">🔁</a> <!--  --> 
					<a title='{{tr "player_repeat-one"}}' class="repeat-one-btn play-mode-btn" tabindex=0 onclick="return setMode('normal'),false;">🔂</a>
					<a title='{{tr "player_normal"}}' class="normal-btn play-mode-btn" tabindex=0 onclick="return setMode('repeat'),false;">🔁</a>
					<a title='{{tr "player_shuffle"}}' class="shuffle-btn" tabindex=0 onclick="return toggleShuffle(),false;">🔀</a>
					<a title='{{tr "player_download"}}' class="download-btn" tabindex=0 target="_blank">⤵️</a>
				</div>
			</div>
		</div>

		<script>
			var LASTMOD = {{$.LastMod}};
			var USERID = {{$.User.ID}};
			var PAGE_CACHE = {};
			var NEXT = {{with $.Next}}{{.}}{{else}}null{{end}};
			var LOADINGPROG = document.getElementById("loading-progress");
			var TOTAL_TRACKS = "{{$.User.Tracks}}";
			var PLAYER = document.getElementById("player");
			var PLAYER_INNER = document.getElementById("player-inner");
			var AUDIO = PLAYER.querySelector("audio");
			var AUDIO_PRELOAD = new Audio();
			var SORTED = {};
			
			function initPage() {
				try {
					if (localStorage["volume"] != void 0) {
						var volume = Number(localStorage["volume"]);
						AUDIO.volume = volume;
						console.log("remembered volume", volume);
					}
				} catch(err) {
					console.log(err);
				}

				// TODO: re-enable
				return;

				loadCache(function(ok) {
					var cache = getCache(this.location);
					if (!cache || !ok) {
						initCache();
						if (!!NEXT) {
							fetchNext(NEXT, null, getCache(this.location));
						} else {
							// TODO fix
							fetchNext(null, null, getCache(this.location));
						}
						return;
					}
					innerReplace("#playlist", true, cache);
					reconcileSortDefault();
					LOADINGPROG.textContent = "";
				});
			}
			window.addEventListener("DOMContentLoaded", initPage);

			function initCache() {
				var docstr = new XMLSerializer().serializeToString(document);
				var copy = new DOMParser().parseFromString(docstr, "text/html");
				copy.lastMod = new Date();
				setCache(this.location, copy);
			}

			function saveCache() {
				localStorage.clear();

				var pages = Object.keys(PAGE_CACHE);
				var meta = {
					lastMod: LASTMOD,
					userID: USERID,
					pages: pages
				};

				var ops = [];

				caches.open(LASTMOD).then(function(cache) {
					for (k of pages) {
						var doc = PAGE_CACHE[k];
						if (!doc instanceof HTMLDocument) {
							console.log("skip save", doc);
							continue;
						}
						var str = new XMLSerializer().serializeToString(doc);
						// localStorage[k] = str;

						cache.put(new Request(k), new Response(str)).then(function() {
							console.log("cached", k);
						});
					}
				});

				// TODO: await on ops

				localStorage["$meta"] = JSON.stringify(meta);
			}

			async function loadCache(after) {
				var metaraw = localStorage["$meta"];
				if (!metaraw) {
					after(false);
					return false;
				}
				var meta = JSON.parse(metaraw);
				console.log("cache lastmod", meta.lastMod, LASTMOD);
				if (LASTMOD > meta.lastMod || USERID != meta.userID) {
					console.log("stale cache:", meta, LASTMOD, meta.userID, USERID);
					localStorage.clear();
					// TODO clear cache
					caches.delete(meta.lastMod).then(function() {
						console.log("deleted cache2", meta.lastMod);
					})
					after(false);
					return false;
				}
				caches.open(LASTMOD).then(async function(cache) {
					for (k of meta.pages) {
						await cache.match(k).then(async function(resp) {
							if (!resp) {
								return;
							}
							var raw = await resp.text();
							// var raw = localStorage[k];
							if (!raw) {
								console.log("missing", k);
								return;
							}
							var doc = new DOMParser().parseFromString(raw, "text/html");
							doc.href = k;
							PAGE_CACHE[k] = doc;
							console.log("loaded from cache: ", k);
						})
					}
				}).then(after.bind(window, true));
				return true;
			}
			
			function fetchNext(next, path, cacheDoc) {
				if (!path) {
					path = location.pathname;
				}
				if (!next) {
					console.log("next: done");
					if (cacheDoc) {
						cacheDoc.loadedAll = true;
					}
					sortTracks();
					LOADINGPROG.textContent = "";
					// TODO: inaccurate, need len($.Tracks)
					delete LOADINGPROG.dataset.ct;
					synch();
					saveCache();
					return;
				}

				var href = new URL(window.location.href);
				href.searchParams.set("next", next);
				href.searchParams.set("lm", LASTMOD); // cache bust
				href.searchParams.set("u", USERID); // cache bust
				href.searchParams.set("render", "inline");

				var xhr = new XMLHttpRequest();
				xhr.responseType = "document";
				xhr.open("GET", href);
				xhr.onload = function () {
					if (this.status == 200) {
						var doc = this.response;
						var meat = doc.body.querySelector(".meat");

						var copyTo = function(dst) {
							var main = dst.querySelector(".meat");
							var copy = dst.importNode(meat, true);
							var children = Array.from(copy.children);
							for (var i = 0; i < children.length; i++) {
								var n = children[i];
								insert(dst, main, n);
							}
						}.bind(this);

						var insert = function(d, holder, n) {
							if (n.classList.contains("meat-partial") && !!n.id) {
								var target = d.getElementById(n.id);
								if (target) {
									target = target.querySelector(".meat-merge");
									var kids = Array.from(n.querySelector(".meat-merge").children);
									for (inner of kids) {
										target.appendChild(inner);
									}
									return;
								}
							}
							holder.appendChild(n);
						}.bind(this);

						if (path == location.pathname) {
							copyTo(document);

							var ct = Number(this.getResponseHeader("Tube-Count"));
							var prog = Number(LOADINGPROG.dataset.ct) || 0;
							prog += ct;
							LOADINGPROG.dataset.ct = prog;
							LOADINGPROG.textContent = Math.min(99, Math.floor(prog/TOTAL_TRACKS*100)) + "%";
						}

						if (cacheDoc) {
							copyTo(cacheDoc);
						}

						setTimeout(fetchNext.bind(window, this.getResponseHeader("Tube-Next"), path, cacheDoc), 0);
					} else {
						console.log("next error:", this.document);
						alert("Error: " + this.response);
					}
				};
				xhr.send(null);
			}

			AUDIO.onplay = function(evt) {
				var track = document.getElementById(PLAYER.dataset.track);
				if (!track) {
					return;
				}
				track.dataset.state = "playing";
				PLAYER.dataset.state = "playing";

				if ('mediaSession' in navigator) {
					navigator.mediaSession.playbackState = "playing";
				}
			}

			AUDIO.onpause = function(evt) {
				PLAYER.dataset.state = "paused";
				if ('mediaSession' in navigator) {
					navigator.mediaSession.playbackState = "paused";
				}
				maybeSendPlayed("paused");
			}

			AUDIO.onended = function(evt) {
				maybeSendPlayed("ended");
				var next = nextTrack();
				if (!next) {
					return;
				}
				console.log("playing next:", next);
				playTrack(next);
			}

			AUDIO.onvolumechange = function(evt) {
				localStorage["volume"] = AUDIO.volume;
				console.log("set volume", AUDIO.volume);
			}

			AUDIO.ontimeupdate = function(evt) {
				maybeSendPlayed();
			}

			var RESUME_MIN = 15*60; // 15 min
			var RESUME_INT = 1*60; // 1 min
			function maybeSendPlayed(trigger) {
				var id = PLAYER.dataset.track;
				var cur = AUDIO.currentTime;
				var dur = AUDIO.duration;
				if (isNaN(dur) || !isFinite(dur)) {
					return;
				}
				var ended = trigger == "ended";
				var paused = trigger == "paused";
				var stopped = trigger == "stopped";

				var resume = Number(PLAYER.dataset.resume) || 0;
				if (dur >= RESUME_MIN || resume > 0) {
					var newres = cur;
					if (ended || cur == dur) {
						// mark complete
						newres = 0;
					}
					if (ended || paused || stopped || Math.abs(newres - resume) >= RESUME_INT) {
						updateResume(id, newres);
						PLAYER.dataset.resume = newres;
					}
				}

				if (cur/dur < 0.95) {
					return;
				}
				if (Number(PLAYER.dataset.n) == Number(PLAYER.dataset.lastUpdate)) {
					return;
				}

				PLAYER.dataset.lastUpdate = PLAYER.dataset.n;

				var data = new FormData();
				data.append("duration", dur);

				var xhr = new XMLHttpRequest();
				xhr.open("POST", "/track/" + id + "/played")
				xhr.onload = function () {
					if (xhr.status == 200) {
						// ...
					} else {
						console.log(xhr.status, xhr.response);
					}
				};
				xhr.send(data);
			}

			function updateResume(id, cur) {
				var data = new FormData();
				data.append("cur", cur);
				data.append("time", new Date().getTime());

				var xhr = new XMLHttpRequest();
				xhr.open("POST", "/track/" + id + "/resume")
				xhr.onload = function () {
					if (xhr.status == 204) {
						console.log("updated resume", id, cur)
						var track = document.getElementById(id);
						if (!track) {
							console.log("no track", id);
							return;
						}
						track.dataset.resume = cur;
					} else {
						console.log("resume update err", xhr.status, xhr.content);
					}
				};
				xhr.send(data);
			}

			document.addEventListener("keydown", function(event) {
				var code = event.code;
				if (event.target.tagName == "INPUT" || event.target.tagName == "TEXTAREA") {
					return;
				}
				switch (code) {
				case "Space":
					if (event.target.tagName == "AUDIO") {
						// avoid double processing
						return;
					}
					event.preventDefault();
					event.stopPropagation();
					togglePlay(currentTrack());
					return;
				case "BracketLeft":
					event.preventDefault();
					event.stopPropagation();
					playTrack(prevTrack(), true);
					return;
				case "BracketRight":
					event.preventDefault();
					event.stopPropagation();
					playTrack(nextTrack(), true);
					return;
				case "Escape":
					selectedTracks().forEach(function(track) {
						delete track.dataset.selected;
					});
					PLAYER.dataset.multiselect = "off";
					return;
				case "KeyA":
					// if (!event.altKey) {
					// 	return;
					// }
					var tracks = playableTracks().map(function(v) { return document.getElementById(v); });
					var selected = true;
					for (track of tracks) {
						if (!track.dataset.selected) {
							selected = false;
						}
					}
					for (track of tracks) {
						if (selected) {
							delete track.dataset.selected;
						} else {
							track.dataset.selected = true;
						}
					}
					PLAYER.dataset.multiselect = selected ? "off" : "on";
					return;
				case "KeyF":
					if (event.shiftKey) {
						FILTER.value = "";
					}
					setTimeout(function() { FILTER.focus() }, 0);
					return;
				}
			});

			function playTrack(id, keepPaused) {
				if (id == null) {
					id = nextTrack();
				}
				var track = document.getElementById(id);
				if (!track) {
					console.log("no track", id);
					return;
				}

				var cover = track.querySelector("img.album-cover");
				if (cover) {
					PLAYER_INNER.style.backgroundImage = 'url("' + cover.src + '")';
				} else {
					PLAYER_INNER.style.backgroundImage = 'none';
				}

				// continue playing
				if (PLAYER.dataset.track == id && AUDIO.src.endsWith(track.dataset.src)) {
					AUDIO.play();
					return;
				}

				// fix state for prev song
				if (PLAYER.dataset.track) {
					document.getElementById(PLAYER.dataset.track).dataset.state = "stopped";
					maybeSendPlayed("stopped");
				}

				if (peekHistory() != id) {
					pushHistory(id);
				}

				PLAYER.dataset.track = id;
				PLAYER.dataset.n++;
				AUDIO.src = track.dataset.src;
				PLAYER.querySelector("figcaption").textContent = trackName(track);
				PLAYER.querySelector(".download-btn").href = track.dataset.src;

				if ('mediaSession' in navigator) {
					initMediaSession();
					navigator.mediaSession.metadata = toMetadata(track);
				}

				// resume stuff
				var resume = Number(track.dataset.resume) || 0;
				if (resume > 0) {
					AUDIO.currentTime = resume;
				}
				PLAYER.dataset.resume = resume;

				if (!keepPaused || PLAYER.dataset.state == "playing") {
					AUDIO.play();
				}

				var nxt = nextTrack();
				if (nxt) {
					console.log("preload next:", nxt, AUDIO_PRELOAD);
					AUDIO_PRELOAD.src = document.getElementById(nxt).dataset.src;
					// dumb hack...
					// TODO: add peekNext()
					QUEUE.unshift(nxt);
				}
			}

			function playTracks(tracks) {
				QUEUE.clear();
				var play = null;
				for (var i = 0; i < tracks.length; i++) {
					var t = tracks[i];
					if (i == 0 /* && currentTrack() == null */) {
						play = t.id;
						continue
					}
					QUEUE.push(t.id);
				}
				if (play) {
					playTrack(play);
				}
			}

			function pauseTrack(id) {
				// var track = document.getElementById(id);
				// if (!track) {
				// 	console.log("no track", id);
				// 	return;
				// }

				// TODO: stop?
				if (PLAYER.dataset.track) {
					document.getElementById(PLAYER.dataset.track).dataset.state = "stopped";
				}
				AUDIO.pause();
			}

			// toggle play
			function togglePlay(id, event) {
				if (id == null) {
					// TODO: move this somewhere else?
					playTrack(null);
					return;
				}

				var track = document.getElementById(id);
				if (!track) {
					console.log("no track", id);
					return;
				}
				if (track.dataset.state == "playing") {
					pauseTrack(id);
				} else {
					playTrack(id);
				}
			}

			// toggle selected
			function toggleTrack(id, event) {
				var track = document.getElementById(id);
				if (!track) {
					console.log("no track", id);
					return;
				}
				event.stopPropagation();
				event.preventDefault();

				/*
				if (event && event.shiftKey) {
					event.stopPropagation();
					event.preventDefault();
					var prev = track.previousElementSibling;
					var tracks = [];
					while (prev != null) {
						tracks.push(prev);
						if (prev.dataset.selected == "true") {
							break;
						}
						prev = prev.previousElementSibling;
					}
					if (!prev) {
						if (track.dataset.selected == "true") {
							delete track.dataset.selected;
						} else {
							track.dataset.selected = true;
						}
						return;
					}
					tracks.push(track);
					// if (!prev) {
					// 	prev = firstTrack();
					// }
					tracks.forEach(function (t) {
						if (track.dataset.selected == "true") {
							delete t.dataset.selected;
						} else {
							t.dataset.selected = true;
						}
					})
					// todo ctrl
					synchSelected();
					return;
				} else */

				// ctrl to select
				if (!event.ctrlKey) {
					togglePlay(id);
					return;
				}

				// click to select
				if (track.dataset.selected == "true") {
					track.dataset.selected = false;
				} else {
					track.dataset.selected = true;
				}

				if (event.detail == 2 && !event.ctrlKey) {
					togglePlay(id);
					unselectTracks();
				}

				synchSelected();
			}

			function toggleOrPlay(id, event) {
				if (event && event.ctrlKey) {
					toggleTrack(id, event);
					return;
				}
				playTrack(id);
			}

			function selectAlbum(elem, event) {
				if (!event.ctrlKey) {
					return false;
				}
				elem.closest(".album").querySelectorAll(".track").forEach(function(track) {
					track.dataset.selected = track.dataset.selected != "true";
				});
				synchSelected();
				return true;
			}

			function selectedTracks() {
				var tracks = document.querySelectorAll('.track[data-selected="true"]');
				return Array.from(tracks);
			}

			function unselectTracks() {
				selectedTracks().forEach(function(track) {
					delete track.dataset.selected;
				})
				synchSelected();
			}

			function synchSelected() {
				PLAYER.dataset.multiselect = selectedTracks().length > 0 ? "on" : "off";
			}

			function resetPlayer() {
				delete PLAYER.dataset.track;
				PLAYER_INNER.style.backgroundImage = 'none';
				PLAYER.querySelector(".player-title").innerHTML = "&nbsp;";
				PLAYER.querySelector(".download-btn").removeAttribute("href");
				AUDIO.src = "";
				// AUDIO.removeAttribute("src");
			}

			function currentTrack() {
				return PLAYER.dataset.track || null;
			}

			function nextTrack() {
				var pop = popQueue();
				if (pop) {
					return pop;
				}
				if (!pop && PLAYER.dataset.shuffle == "on") {
					// repopulate shuffle queue
					console.log("repopulate queue");
					if (queueShuffle()) {
						return nextTrack();
					}
				}

				var current = document.getElementById(PLAYER.dataset.track);
				if (!current) {
					return firstTrack();
				}
				var next = current.nextElementSibling;
				while (next != null && getComputedStyle(next).display == "none") {
					next = next.nextElementSibling;
				}
				if (!next) {
					if (getMode() == 'repeat') {
						return firstTrack();
					}
					return null;
				}
				return next.id;
			}

			function prevTrack() {
				var pop = popHistory();
				while (pop != null && pop == currentTrack()) {
					pop = popHistory();
				}
				if (pop) {
					return pop;
				}

				var current = document.getElementById(PLAYER.dataset.track);
				if (!current) {
					// TODO: hmm think this thru
					return null;
					// var all = document.querySelectorAll(".track");
					// return all[all.length-1].id;
				}
				var prev = current.previousElementSibling;
				while (prev != null && getComputedStyle(prev).display == "none") {
					prev = prev.previousElementSibling;
				}
				if (!prev) {
					return null;
				}
				return prev.id;
			}

			function firstTrack() {
				var current = document.querySelectorAll(".track")[0];
				if (!current) {
					return null;
				}
				while (current != null && getComputedStyle(current).display == "none") {
					current = current.nextElementSibling;
				}
				if (!current) {
					return null;
				}
				return current.id;
			}

			function playableTracks(exclude) {
				var all = document.querySelectorAll(".track");
				var tracks = [].filter.call(all, function(t) {
					if (exclude && exclude.includes(t.id)) {
						return false;
					}
					return getComputedStyle(t).display != "none";
				});
				return [].map.call(tracks, function(t) {
					return t.id;
				});
			}

			function popQueue() {
				return QUEUE.pop();
			}

			function popHistory() {
				return HISTORY.pop();
			}

			function pushHistory(id) {
				HISTORY.unshift(id);
			}

			function peekHistory() {
				return HISTORY.peek();
			}

			function toggleShuffle() {
				if (PLAYER.dataset.shuffle == "on") {
					console.log("shuffle: off");
					QUEUE.clear(); // TODO
					PLAYER.dataset.shuffle = "off";
					return;
				}

				console.log("shuffle: on");
				PLAYER.dataset.shuffle = "on";
				queueShuffle();
			}

			function queueShuffle() {
				var queue = playableTracks([currentTrack()]);
				shuffleArray(queue);
				QUEUE.set(queue);
			}

			function pushQueue(tracks) {
				for (t of tracks) {
					QUEUE.push(t);
				}
			}

			function Queue(elem, attr) {
				this.elem = elem;
				this.attr = attr;
			}
			Queue.prototype.toArray = function() {
				var q = this.elem.dataset[this.attr];
				if (!q) { 
					return [];
				}
				return q.split(" ");
			}
			Queue.prototype.set = function(arr) {
				if (!arr || arr.length == 0) {
					this.clear();
				}
				this.elem.dataset[this.attr] = arr.join(" ");
			}
			Queue.prototype.clear = function() {
				delete this.elem.dataset[this.attr];
			}
			Queue.prototype.push = function(x) {
				var q = this.toArray();
				q.push(x);
				this.set(q);
			}
			Queue.prototype.unshift = function(x) {
				var q = this.toArray();
				q.unshift(x);
				this.set(q);
			}
			Queue.prototype.pop = function(x) {
				var q = this.toArray();
				var x = q[0];
				this.set(q.slice(1));
				return x;
			}
			Queue.prototype.peek = function() {
				var q = this.toArray();
				return q[0];
			}

			var HISTORY = new Queue(PLAYER, "history");
			var QUEUE = new Queue(PLAYER, "queue");

			function setMode(mode) {
				PLAYER.dataset.mode = mode;
				switch (mode) {
				case "repeat-one":
					AUDIO.loop = true;
					break;
				case "repeat":
				case "normal":
					AUDIO.loop = false;
				}
			}

			function getMode() {
				return PLAYER.dataset.mode || 'normal';
			}

			function trackName(track) {
				var name = "";
				var parts = [
					track.querySelector(".track-artist").textContent,
					track.querySelector(".track-album").textContent,
					track.querySelector(".track-title").textContent
				];
				parts = parts.filter(function(str) {
					return str.length > 0;
				});
				if (parts.length == 1) {
					return parts[0];
				}
				return parts.join(" - ");
			}

			function toMetadata(track) {
				if (!track || !window.MediaMetadata) {
					return null;
				}
				var meta = new MediaMetadata({
					title: track.querySelector(".track-title").textContent.trim(),
					artist: track.querySelector(".track-artist").textContent.trim(),
					album: track.querySelector(".track-album").textContent.trim(),
				});
				var cover = track.querySelector("img.album-cover");
				if (cover) {
					var w = cover.naturalWidth || 250;
					var h = cover.naturalHeight || 250;
					meta.artwork = [{
						src: cover.src,
						type: mimeTypeOf(cover.src),
						sizes: w + "x" + h
					}];
				}
				return meta;
			}

			function initMediaSession() {
				if (!('mediaSession' in navigator)) {
					return;
				}
				navigator.mediaSession.setActionHandler('play', function() {
					var id = PLAYER.dataset.track;
					if (!id) {
						// TODO: better playlist handling
						id = document.querySelectorAll(".track")[0].id;
					}
					playTrack(id);
				});
				navigator.mediaSession.setActionHandler('pause', pauseTrack);
				navigator.mediaSession.setActionHandler('previoustrack', function() {
					// TODO
					var prev = prevTrack();
					if (!prev) {
						return;
					}
					playTrack(prev);
				});
				navigator.mediaSession.setActionHandler('nexttrack', function() {
					var next = nextTrack();
					// TODO: better playlist handling
					if (!next) {
						return;
					}
					playTrack(next);
				});
				// navigator.mediaSession.setActionHandler('seekbackward', function() {});
				// navigator.mediaSession.setActionHandler('seekforward', function() {});
			}

			var FILTER = document.getElementById("filter-input");
			var FILTER_STYLE = document.getElementById("filter-style");
			var FILTER_PARAM = {
				any: "#playlist [data-title*='$INPUT' i], #playlist [data-album*='$INPUT' i], #playlist [data-artist*='$INPUT' i], #playlist [data-tags~='$INPUT'] { display: revert !important; }\n#playlist .track, #playlist .album { display: none; }",
				artist: "#playlist [data-artist='$INPUT' i], #playlist [data-any-artist='$INPUT' i] { display: revert !important; }\n#playlist .track, #playlist .album { display: none; }",
				album: "#playlist [data-album*='$INPUT' i] { display: revert !important; }\n#playlist .track, #playlist .album { display: none; }",
				tag: "#playlist [data-tags~='$INPUT'] { display: revert !important; }\n#playlist .track, #playlist .album { display: none; }"
			};
			function updateFilter(event) {
				var input = FILTER.value;
				var style = FILTER_STYLE;
				if (input.length == 0) {
					style.innerHTML = "";
					return
				}
				var filter = FILTER_PARAM.any;
				var params = Object.keys(FILTER_PARAM);
				for (var i = 0; i < params.length; i++) {
					var param = params[i];
					var idx = input.indexOf(param + ":");
					if (idx != 0) {
						continue;
					}
					filter = FILTER_PARAM[param];
					input = input.slice(param.length+1);
					break;
				}
				input = escapeSel(input);
				style.innerHTML = filter.replaceAll("$INPUT", input);

				if (event instanceof SubmitEvent) {
					FILTER.blur();
				}
			}
			function setFilter(arg) {
				FILTER.value = arg;
				updateFilter();
			}

			function editTrack(tracksOrID) {
				var id = tracksOrID;
				if (tracksOrID instanceof Array) {
					id = tracksOrID.map(function(t) { return t.id }).join(",");
				}
				if (!id) {
					alert("no track selected");
					return;
				}
				var url = "/track/" + id + "/edit"
				window.open(url, "_blank");
				return;
			}

			function deleteTrack(tracks) {
				// TODO: i18n
				var del = function(track) {
					var xhr = new XMLHttpRequest();
					xhr.open("DELETE", "/track/" + track.id)
					xhr.onload = function () {
						if (xhr.status == 200) {
							track.parentNode.removeChild(track);
							resetPlayer();
						} else {
							alert("Error: " + xhr.response);
						}
					};
					xhr.send(null);
				};

				if (tracks && tracks.length > 0) {
					if (confirm("Really delete " + tracks.length + " selected track(s)?")) {
						tracks.forEach(del);
					}
					synchSelected();
					return;
				}

				if (!PLAYER.dataset.track) {
					return;
				}

				var id = PLAYER.dataset.track;
				var track = document.getElementById(id);
				var title = track.querySelector(".track-title").textContent.trim();
				if (confirm("Really delete: " + title + "?")) {
					del(track);
				}
			}

			function toggleSort(elem) {
				var reverse = elem.dataset.reverse == "true";
				if (elem.classList.contains("active")) {
					reverse = !reverse;
				}
				var by = elem.dataset.order;

				reconcileSort({
					sort: by,
					reverse: reverse
				}, elem);
				var prev = location.pathname;
				pushState({href: elem.href, sort: by, reverse: reverse, prev: prev}, "", elem.href);
			}

			function reconcileSort(state, sorterElem) {
				var by = state.sort;
				var reverse = state.reverse;

				var elem = sorterElem;
				if (!elem) {
					elem = document.querySelector(".sort-row [data-order='" + escapeSel(by) + "']");
				}

				if (!sortTracks(by, reverse)) {
					console.log("couldn't sort...");
					return;
				}

				elem.classList.add("active");
				elem.dataset.reverse = reverse;
				if (reverse) {
					elem.href = elem.href.toString().replace(by, "-"+by);
				} else {
					elem.href = elem.href.toString().replace("-"+by, by);
				}

				document.querySelectorAll(".sort-row a").forEach(function(e) {
					if (e == elem) {
						return;
					}
					e.classList.remove("active");
				});
			}

			function sortOrder(by, reverse) {
				console.log("sortOrder", by, reverse);
				var dir = reverse ? "desc" : "asc";

				// TODO: add cache
				// var order = SORTED[by][dir];
				// if (order) {
				// 	return order;
				// }

				var sortFunc = function(attrib) {
					return function(a, b) {
						var x = a.dataset[attrib];
						var y = b.dataset[attrib];
						if (x > y) {
							return 1;
						}
						if (x < y) {
							return -1;
						}
						return 0;
					}
				};
				var sort = null;
				switch (by) {
				case "added":
					sort = sortFunc("date");
					break;
				case "album":
					sort = sortFunc("album");
					break;
				case "artist":
					sort = sortFunc("anyArtist");
					break;
				case "title":
					sort = sortFunc("title");
					break;
				default:
					throw by;
				}

				var tracks = Array.from(document.querySelectorAll(".track"));
				tracks.sort(sort);
				if (reverse) {
					tracks.reverse();
				}

				// TODO
				// SORTED[by][dir] = tracks;
				return tracks;
			}

			function reconcileSortDefault() {
				var param = new URL(window.location).searchParams.get("sort");
				if (!param) {
					sortTracks();
					return;
				}
				var reverse = false;
				if (param[0] == "-") {
					reverse = true;
					param = param.slice(1);
				}
				reconcileSort({
					sort: param,
					reverse: reverse
				});
				sortTracks(param, reverse);
			}
			function sortTracks(by, reverse) {
				var tracks = document.getElementById("tracks-list");
				var table = document.getElementById("playlist");
				if (!tracks) {
					console.log("no tracks");
					return false;
				}

				if (!by) {
					by = tracks.dataset.sort;
					reverse = tracks.dataset.reverse == "true";
				}

				var order = sortOrder(by, reverse);
				if (!order) {
					console.log("no sort order:", by, dir);
					return false;
				}

				if (table) {
					// table.style.display = "none";
				}

				var frag = new DocumentFragment();
				for (var i = 0; i < order.length; i++) {
					frag.appendChild(order[i]);
					// var id = order[i];
					// var track = document.getElementById(id);
					// if (!track) {
					// 	console.log("no track:", id);
					// 	continue;
					// }
					// frag.appendChild(track);
				}

				// tracks.textContent = "";
				tracks.appendChild(frag);
				tracks.dataset.sort = by;
				tracks.dataset.reverse = reverse;

				if (table) {
					// table.style.display = "unset";
				}
				return true;
			}

			INLINE_SUFFIX = "render=inline"
			TARGET_PAGE = null;
			function visit(elem) {
				var href = appendQuery(elem.href, INLINE_SUFFIX);
				TARGET_PAGE = href;
				return visitHref(href);
				// var playlist = document.getElementById("playlist");
			}

			// TODO: use URLSearchParams
			function appendQuery(href, suffix) {
				href = href.toString();
				if (href.indexOf("?") == -1) {
					return href + "?" + suffix;
				}
				return href + "&" + suffix;
			}

			function stripQuery(href, suffix) {
				href = href.replace("?" + suffix, "");
				href = href.replace("&" + suffix, "");
				return href;
			}

			function getCache(href) {
				var path = new URL(href).pathname;
				return PAGE_CACHE[path];
			}

			function setCache(href, v) {
				var path = new URL(href).pathname;
				v.href = path;
				PAGE_CACHE[path] = v;
			}

			function visitHref(href, nopop) {
				console.log("visit", href, nopop);
				var playlist = "#playlist";
				var after = innerReplace.bind(null, playlist, nopop);

				var nosuffix = stripQuery(href, INLINE_SUFFIX);
				var path = escapeSel(nosuffix.replace(location.origin, ""));
				if (document.querySelector(".menu a[href='" + path + "']")) {
					[].forEach.call(document.querySelectorAll(".menu a"), function(link) {
						link.className = link.href == nosuffix ? "active" : "";
					});
				}

				var cached = getCache(href);
				if (cached instanceof HTMLDocument || cached instanceof Document) {
					innerReplace(playlist, nopop, cached);
					// checkLastMod(href, after);
					return;
				}
				if (cached instanceof XMLHttpRequest) {
					console.log("inflight request...");
					cached.after = after;
					return;
				}
				loadPage(href, after);
			}

			prefetch = function(elem) {
				// var href = appendQuery(elem.href, INLINE_SUFFIX);
				// var playlist = document.getElementById("playlist");

				// if (PAGE_CACHE[href]) {
				// 	return;
				// }

				// loadPage(href);
			}

			Array.prototype.forEach.call(document.querySelectorAll(".prefetch a"), function(link) {
				prefetch(link);
			});

			function checkLastMod(href, after) {
				var cached = getCache(href);
				var cachedLM = getCache(href).lastMod;
				if (!cachedLM) {
					cachedLM = new Date(0);
				}

				var _after = after;
				after = function() {
					console.log("after:", href, TARGET_PAGE);
					// TODO: this is shit code
					// the idea is not to flip the page after the cache is refreshed if we've moved to a different one
					if (href != TARGET_PAGE) {
						console.log("stale after?", href);
						return;
					}

					_after.apply(this, arguments);
				}

				var xhr = new XMLHttpRequest();
				xhr.responseType = "document";
				xhr.open("HEAD", href)
				xhr.onload = function () {
					if (this.status == 200) {
						var lmh = this.getResponseHeader("Last-Modified");
						if (!lmh) {
							return;
						}
						var lastMod = new Date(lmh);
						if (lastMod > cachedLM) {
							console.log("updating cache", href);
							loadPage(href, after);
						}
					} else {
						console.log("view error:", this.document);
						// alert("Error: " + xhr.responseText);
					}
				};
				xhr.send(null);	
			}

			function loadPage(href, after) {
				var xhr = new XMLHttpRequest();
				xhr.after = after;
				// PAGE_CACHE[href] = xhr;
				setCache(href, xhr);
				xhr.responseType = "document";
				xhr.open("GET", href)
				xhr.onload = function () {
					if (this.status == 200) {
						var doc = this.response;
						var lm = this.getResponseHeader("Last-Modified");
						if (lm) {
							doc.lastMod = new Date(lm);
						}
						doc.href = stripQuery(href, INLINE_SUFFIX);
						// PAGE_CACHE[href] = doc;
						setCache(href, doc);
						if (this.after) {
							this.after(doc);
						}
						var next = this.getResponseHeader("Tube-Next");
						if (next) {
							LOADINGPROG.dataset.ct = this.getResponseHeader("Tube-Count");
							fetchNext(next, null, doc);
						}
					} else {
						console.log("view error:", this.document);
						// alert("Error: " + xhr.responseText);
					}
				};
				xhr.send(null);
			}

			function innerReplace(targetSel, nopop, content) {
				var target = document.querySelector(targetSel);
				var copy = document.importNode(content.querySelector(targetSel), true);
				console.log("replace", target, content);
				if (!target || !content) {
					console.log("null target/doc", target, content);
					return false;
				}
				if (!copy.firstElementChild) {
					console.log("no doc.body/child")
					return false;
				}
				var parent = target.parentNode;
				parent.removeChild(target);
				parent.appendChild(copy);
				synch();
				if (!nopop) {
					pushState({href: content.href, prev: location.pathname}, "", content.href);
				}
			}

			function synch() {
				if (!PLAYER.dataset.track) {
					return;
				}
				var track = document.getElementById(PLAYER.dataset.track);
				if (!track) {
					return;
				}
				track.dataset.state = "playing";
				setTimeout(scrollToTrack.bind(null, PLAYER.dataset.track), 0);
				synchSelected();
			}

			function scrollToTrack(id) {
				if (!id) {
					return;
				}
				var topbar = document.getElementById("filter-bar").getBoundingClientRect();
				var track = document.getElementById(id);
				if (!track) {
					console.log("no track", id);
					return;
				}
				window.scrollTo({
					top: track.offsetTop + track.offsetParent.offsetTop - topbar.height,
					left: 0,
					behavior: "smooth"
				});
			}

			var PREV_PATH = null;
			var PREV_LOC = null;
			function pushState(state, title, href) {
				history.pushState(state, title, href);
				PREV_PATH = location.pathname;
				PREV_LOC = location.toString();
			}

			window.onpopstate = function(evt) {
				console.log("popstate:", location.pathname, "pr4ev:", PREV_PATH);
				var state = evt.state;
				var skip = false;
				if (state && PREV_PATH && PREV_PATH == location.pathname && state.sort) {
					skip = true;
				}

				PREV_PATH = location.pathname;

				if (skip) {
					reconcileSort(state);
					return;
				}

				// this is a dumb hack to cheat the cache by going back to the base page then re-sorting
				// TODO: need to make this generic and not dumb
				if (state && state.sort) {
					var p = state.sort; 
					if (state.reverse) {
						p = "-" + p;
					}
					var loc = document.location.toString().replace("?sort=" + p, "");
					loc = appendQuery(loc, INLINE_SUFFIX);
					visitHref(loc, true);
					setTimeout(function() {
						reconcileSort(state);
					}, 0);
					return;
				}

				var loc = appendQuery(document.location, INLINE_SUFFIX);
				console.log(state, loc);
				visitHref(loc, true);
			}

			function escapeSel(input) {
				input = input.replace(/\x22/g, '\\\x22');
				input = input.replace(/\x27/g, '\\\x27');
				input = input.toLowerCase();
				return input;
			}

			function shuffleArray(array) {
				for (var i = array.length - 1; i > 0; i--){
					var j = Math.floor(Math.random() * i);
					var tmp = array[i];
					array[i] = array[j];
					array[j] = tmp;
				}
			}

			function mimeTypeOf(src) {
				var split = src.split(".");
				switch (split[split.legnth-1]) {
				case "jpg":
				case "jpeg":
					return "image/jpeg";
				case "gif":
					return "image/gif";
				case "png":
					return "image/png";
				}
				return void 0;
			}
		</script>
	</body>
</html>